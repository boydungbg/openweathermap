{"version":3,"sources":["App.js","index.js"],"names":["App","state","cityName","currentWeather","weatheres","cities","citiesFilter","active","console","log","props","day","handlerOnclick","bind","getData","axios","method","url","headers","useQueryString","params","q","cnt","units","handlerOnSearchCity","Promise","all","fetch","this","location","pathname","then","data","json","res","setState","e","preventDefault","catch","err","dt","index","list","map","daily","target","value","stringReg","toLowerCase","regex","RegExp","filter","name","country","match","splice","city","background","weather","main","description","sunset","Date","now","className","css","placeholder","type","onChange","onClick","icon","faSearch","key","onClickCitiSearch","src","Math","round","temp","morn","night","toLocaleTimeString","hour","minute","feels_like","faLocationArrow","speed","pressure","humidity","faChevronLeft","id","handlerOnclickActiveDay","getDay","getDate","max","min","faChevronRight","Component","withRouter","ReactDOM","render","document","getElementById","scrollDaily","scrollDailyLeft","scrollDailyRight","addEventListener","scrollLeft","screen","width"],"mappings":"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","file":"static/js/main.c3e496b3.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable array-callback-return */\n/* eslint-disable jsx-a11y/alt-text */\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  faSearch,\n  faLocationArrow,\n  faChevronLeft,\n  faChevronRight,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport axios from \"axios\";\nimport { withRouter } from \"react-router-dom\";\nimport { css } from \"emotion\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cityName: \"\",\n      currentWeather: 0,\n      weatheres: \"\",\n      cities: \"\",\n      citiesFilter: \"\",\n      active: [true],\n    };\n    console.log(this.props);\n    this.day = [\"Sun\", \"Mon\", \"Tue\", \"Web\", \"Thu\", \"Fri\", \"Sat\"];\n    this.handlerOnclick = this.handlerOnclick.bind(this);\n    this.getData = function (cityName = \"hanoi\") {\n      return axios({\n        method: \"GET\",\n        url: \"https://community-open-weather-map.p.rapidapi.com/forecast/daily\",\n        headers: {\n          \"content-type\": \"application/octet-stream\",\n          \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n          \"x-rapidapi-key\":\n            \"f54618c2bdmsh888d0abb30a786ep1c1462jsnd40ae44285b3\",\n          useQueryString: true,\n        },\n        params: {\n          q: cityName,\n          cnt: \"16\",\n          units: \"metric\",\n        },\n      });\n    };\n    this.handlerOnSearchCity = this.handlerOnSearchCity.bind(this);\n  }\n\n  async componentDidMount() {\n    let data = await Promise.all([\n      fetch(this.props.location.pathname + \"city.list.min.json\").then((data) =>\n        data.json()\n      ),\n      this.getData().then((res) => res.data),\n    ]).then((res) => res);\n    this.setState({\n      cities: data[0],\n      weatheres: data[1],\n    });\n  }\n\n  async handlerOnclick(e) {\n    e.preventDefault();\n    let weatheres = await this.getData(this.state.cityName)\n      .then((res) => res.data)\n      .catch((err) => console.log(err));\n    this.setState({\n      cityName: \"\",\n      weatheres: weatheres,\n      citiesFilter: [],\n    });\n  }\n\n  handlerOnclickActiveDay(dt, index) {\n    var active = this.state.weatheres.list.map((daily) => {\n      if (dt === daily.dt) return true;\n      else return false;\n    });\n    this.setState({\n      active: active,\n      currentWeather: index,\n    });\n  }\n\n  handlerOnSearchCity(e) {\n    var cities = [];\n    if (e.target.value) {\n      let stringReg = `^${e.target.value.toLowerCase()}`;\n      const regex = new RegExp(stringReg);\n      cities = this.state.cities.filter(({ name, country }) => {\n        return (name + \",\" + country).toLowerCase().match(regex);\n      });\n    }\n    this.setState({\n      citiesFilter: cities.splice(0, 10),\n      cityName: e.target.value,\n    });\n  }\n  async onClickCitiSearch(city) {\n    if (city) {\n      let weatheres = await this.getData(city)\n        .then((res) => res.data)\n        .catch((err) => console.log(err));\n      this.setState({\n        cityName: \"\",\n        weatheres: weatheres,\n        citiesFilter: [],\n      });\n    }\n  }\n\n  render() {\n    const cityName = this.state.cityName;\n    const weatheres = this.state.weatheres;\n    const cities = this.state.citiesFilter;\n    const currentWeather = this.state.currentWeather;\n    const active = this.state.active;\n    let background = \"\";\n    if (weatheres) {\n      switch (weatheres.list[currentWeather].weather[0].main) {\n        case \"Clouds\":\n          if (\n            weatheres.list[currentWeather].weather[0].description ===\n              \"few clouds\" ||\n            weatheres.list[currentWeather].weather[0].description ===\n              \"broken clouds\" ||\n            weatheres.list[currentWeather].weather[0].description ===\n              \"scattered clouds\"\n          ) {\n            background = \"fewClouds.jpeg\";\n          } else {\n            background = \"cloud.jpeg\";\n          }\n          break;\n        case \"Rain\":\n          if (\n            weatheres.list[currentWeather].weather[0].description ===\n            \"light rain\"\n          ) {\n            background = \"lightRain.jpg\";\n          } else {\n            background = \"ModerateRain.jpg\";\n          }\n          break;\n        case \"Clear\":\n          if (weatheres.list[currentWeather].sunset * 1000 > Date.now()) {\n            background = \"sunny.jpg\";\n          } else {\n            background = \"skynight.jpg\";\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return (\n      <div\n        className={css`\n          text-align: center;\n          height: 100%;\n          background-image: url(\"${this.props.location.pathname}Image/${\n          background ? \"sunny.jpg\" : \"\"\n        }\");\n          background-position: left;\n          background-repeat: no-repeat;\n          background-size: cover;\n        `}\n      >\n        <div className=\"bg-sunny-background\">\n          <ul className=\"header\">\n            <li>\n              <form>\n                <input\n                  placeholder=\"Search\"\n                  type=\"search\"\n                  value={cityName}\n                  onChange={this.handlerOnSearchCity}\n                />\n                <button onClick={this.handlerOnclick}>\n                  <FontAwesomeIcon icon={faSearch} />\n                </button>\n              </form>\n              <ul className=\"list-city\">\n                {cities\n                  ? cities.map((city, index) => (\n                      <li\n                        key={index}\n                        onClick={() =>\n                          this.onClickCitiSearch(city.name + \",\" + city.country)\n                        }\n                      >\n                        {city.name + \",\" + city.country}\n                      </li>\n                    ))\n                  : \"\"}\n              </ul>\n            </li>\n          </ul>\n          <div className=\"main\">\n            <div className=\"city-name\">\n              {weatheres\n                ? weatheres.city.name + \", \" + weatheres.city.country\n                : \"\"}\n            </div>\n            <div className=\"weather-content\">\n              <div className=\"weather-icon\">\n                <img\n                  src={\n                    weatheres\n                      ? \"https://openweathermap.org/img/wn/\" +\n                        weatheres.list[currentWeather].weather[0].icon +\n                        \"@2x.png\"\n                      : \"\"\n                  }\n                />\n              </div>\n              <div className=\"temp\">\n                {weatheres\n                  ? new Date(weatheres.list[currentWeather].sunset * 1000) >\n                    new Date()\n                    ? Math.round(weatheres.list[currentWeather].temp.morn)\n                    : Math.round(weatheres.list[currentWeather].temp.night)\n                  : \"\"}\n                °\n              </div>\n              <div className=\"type-temp\">\n                <div className=\"active\">C</div>\n                <div className=\"in-active\">F</div>\n              </div>\n            </div>\n            <div className=\"weather-description\">\n              {weatheres\n                ? weatheres.list[currentWeather].weather[0].description\n                : \"\"}\n            </div>\n            <div className=\"time-updated\">\n              Updated as of\n              {\" \" +\n                new Date(Date.now()).toLocaleTimeString(\"vn-VN\", {\n                  hour: \"2-digit\",\n                  minute: \"2-digit\",\n                })}\n            </div>\n            <div className=\"weather-detail-1\">\n              <div className=\"content\">\n                <div className=\"content-title\">Feels Like</div>\n                <div className=\"content-value\">\n                  {weatheres\n                    ? Math.round(weatheres.list[currentWeather].feels_like.day)\n                    : \"\"}\n                  °\n                </div>\n              </div>\n              <div className=\"content\">\n                <div className=\"content-title\">Wind</div>\n                <div className=\"content-value\">\n                  <FontAwesomeIcon icon={faLocationArrow} />\n                  {weatheres\n                    ? \"   \" +\n                      Math.round(weatheres.list[currentWeather].speed * 3.6) +\n                      \"km/h\"\n                    : \"\"}\n                </div>\n              </div>\n            </div>\n            <div className=\"weather-detail-1\">\n              <div className=\"content\">\n                <div className=\"content-title\">Barometer</div>\n                <div className=\"content-value\">\n                  {weatheres\n                    ? Math.round(weatheres.list[currentWeather].pressure)\n                    : \"\"}\n                  mb\n                </div>\n              </div>\n              <div className=\"content\">\n                <div className=\"content-title\">Humidity</div>\n                <div className=\"content-value\">\n                  {weatheres\n                    ? \"  \" + Math.round(weatheres.list[currentWeather].humidity)\n                    : \"\"}\n                  %\n                </div>\n              </div>\n            </div>\n            <div className=\"daily\">\n              <div className=\"title left\">Daily</div>\n              <div className=\"forecast\">\n                <div className=\"icon-scroll\">\n                  <FontAwesomeIcon\n                    className=\"icon-daily-left\"\n                    icon={faChevronLeft}\n                    id=\"scroll-daily-left\"\n                  />\n                </div>\n                <div className=\"forecast-daily\" id=\"forecast-daily-scroll\">\n                  {weatheres\n                    ? weatheres.list.map((daily, index) => (\n                        <div\n                          className={\n                            \"forecast-daily-day \" +\n                            (active[index] ? \"active-day\" : \"\")\n                          }\n                          key={index}\n                          onClick={(e) => {\n                            this.handlerOnclickActiveDay(daily.dt, index);\n                          }}\n                        >\n                          <div className=\"content-daily-day\">\n                            {this.day[new Date(daily.dt * 1000).getDay()] +\n                              \" \" +\n                              new Date(daily.dt * 1000).getDate()}\n                          </div>\n                          <img\n                            className={\n                              daily.weather[0].main !== \"Clouds\"\n                                ? \"content-daily-icon-1\"\n                                : \"content-daily-icon-2\"\n                            }\n                            src={\n                              \"https://openweathermap.org/img/wn/\" +\n                              daily.weather[0].icon +\n                              \".png\"\n                            }\n                          />\n                          <div className=\"content-daily-temp\">\n                            <div className=\"daily-temp-max\">\n                              {Math.round(daily.temp.max)}°\n                            </div>\n                            <div className=\"daily-temp-min\">\n                              {Math.round(daily.temp.min)}°\n                            </div>\n                          </div>\n                          <div className=\"daily-weather-des\">\n                            {daily.weather[0].description}\n                          </div>\n                        </div>\n                      ))\n                    : \"\"}\n                </div>\n                <div className=\"icon-scroll\">\n                  <FontAwesomeIcon\n                    className=\"icon-daily-right\"\n                    id=\"scroll-daily-right\"\n                    icon={faChevronRight}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","/* eslint-disable no-restricted-globals */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nvar scrollDaily = document.getElementById(\"forecast-daily-scroll\");\nvar scrollDailyLeft = document.getElementById(\"scroll-daily-left\");\nvar scrollDailyRight = document.getElementById(\"scroll-daily-right\");\n\n// var limitScroll = (scrollDaily.scrollWidth / screen.width) * (2 / 3);\n// var countScrollLeft = 1;\nscrollDailyLeft.addEventListener(\"click\", function () {\n  scrollDaily.scrollLeft -= screen.width * (2 / 3);\n});\nscrollDailyRight.addEventListener(\"click\", function () {\n  scrollDaily.scrollLeft += screen.width * (2 / 3);\n});\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}