{"version":3,"sources":["sevices/getDataWeather.js","renderCities.js","onSearchCity.js","sevices/getDataCity.js","renderWeatherDetail.js","renderForecastDaily.js","App.js","backgoundOnchange.js","index.js"],"names":["cityname","axios","method","url","headers","useQueryString","params","q","cnt","units","then","res","data","renderCity","city","getDataWeather","weatheres","this","props","setWeatheres","setStates","citiesFilter","cityName","cities","className","map","index","key","onClick","onClickCitiSearch","name","country","Component","onSearchCity","state","handlerOnSearchCity","bind","handlerOnclick","timer","obj","setState","e","target","value","clearTimeout","setTimeout","a","fetch","json","splice","preventDefault","console","log","placeholder","type","onChange","icon","faSearch","renderWeatherDetail","weather","currentWeather","src","list","Date","sunset","Math","round","temp","morn","night","description","now","toLocaleTimeString","hour","minute","feels_like","day","css","deg","faLocationArrow","speed","pressure","humidity","renderForecastDaily","active","dt","daily","id","handlerOnclickActiveDay","getDay","getDate","main","max","min","App","background","BackgroundOnChange","location","pathname","faChevronLeft","faChevronRight","withRouter","ReactDOM","render","document","getElementById","scrollDaily","scrollDailyLeft","scrollDailyRight","addEventListener","scrollLeft","screen","width"],"mappings":"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","file":"static/js/main.f5eebde7.chunk.js","sourcesContent":["import axios from \"axios\";\nexport default (cityname = \"hanoi\") => {\n  return axios({\n    method: \"GET\",\n    url: \"https://community-open-weather-map.p.rapidapi.com/forecast/daily\",\n    headers: {\n      \"content-type\": \"application/octet-stream\",\n      \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n      \"x-rapidapi-key\": \"f54618c2bdmsh888d0abb30a786ep1c1462jsnd40ae44285b3\",\n      useQueryString: true,\n    },\n    params: {\n      q: cityname,\n      cnt: \"16\",\n      units: \"metric\",\n    },\n  }).then((res) => res.data);\n};\n","/* eslint-disable react/react-in-jsx-scope */\nimport React, { Component } from \"react\";\nimport getDataWeather from \"./sevices/getDataWeather\";\n\nclass renderCity extends Component {\n  async onClickCitiSearch(city) {\n    if (city) {\n      let weatheres = await getDataWeather(city);\n      this.props.setWeatheres({ weatheres });\n      this.props.setStates({\n        citiesFilter: [],\n        cityName: \"\",\n      });\n    }\n  }\n\n  render() {\n    let cities = this.props.cities;\n    return (\n      <ul className=\"list-city\">\n        {cities\n          ? cities.map((city, index) => (\n              <li\n                key={index}\n                onClick={() =>\n                  this.onClickCitiSearch(city.name + \",\" + city.country)\n                }\n              >\n                {city.name + \",\" + city.country}\n              </li>\n            ))\n          : \"\"}\n      </ul>\n    );\n  }\n}\n\nexport default renderCity;\n","/* eslint-disable no-this-before-super */\n/* eslint-disable react/react-in-jsx-scope */\nimport React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport ListCities from \"./renderCities\";\nimport getDataCity from \"./sevices/getDataCity\";\nimport getDataWeather from \"./sevices/getDataWeather\";\n\nclass onSearchCity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: \"\",\n      citiesFilter: [],\n    };\n    this.handlerOnSearchCity = this.handlerOnSearchCity.bind(this);\n    this.handlerOnclick = this.handlerOnclick.bind(this);\n    this.setStates = this.setStates.bind(this);\n    this.timer = null;\n  }\n\n  setStates(obj) {\n    this.setState(obj);\n  }\n\n  handlerOnSearchCity(e) {\n    this.setState({ cityName: e.target.value });\n    clearTimeout(this.timer);\n    this.timer = setTimeout(async () => {\n      let data = [];\n      if (this.state.cityName) {\n        data = await getDataCity(this.state.cityName);\n      }\n      this.setState({\n        citiesFilter: data.cities ? data.cities.splice(0, 10) : [],\n      });\n    }, 400);\n  }\n  async handlerOnclick(e) {\n    e.preventDefault();\n    let weatheres = await getDataWeather(this.state.cityName);\n    this.setState({\n      cityName: \"\",\n      citiesFilter: [],\n    });\n    this.props.setStates({ weatheres });\n  }\n\n  render() {\n    let cityName = this.state.cityName;\n    console.log(this.state.citiesFilter);\n    return (\n      <ul className=\"header\">\n        <li>\n          <div>\n            <form>\n              <input\n                placeholder=\"Search\"\n                type=\"search\"\n                value={cityName}\n                onChange={this.handlerOnSearchCity}\n              />\n              <button onClick={this.handlerOnclick}>\n                <FontAwesomeIcon icon={faSearch} />\n              </button>\n            </form>\n          </div>\n          <ListCities\n            cities={this.state.citiesFilter}\n            setWeatheres={this.props.setStates}\n            setStates={this.setStates}\n          />\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default onSearchCity;\n","export default (cityname) => {\n  return fetch(`http://localhost:8080/city/search?q=${cityname}`).then((data) =>\n    data.json()\n  );\n};\n","/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable react/react-in-jsx-scope */\nimport React, { Component } from \"react\";\nimport { faLocationArrow } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { css } from \"emotion\";\n\nclass renderWeatherDetail extends Component {\n  render() {\n    let weatheres = this.props.weather.weatheres;\n    let currentWeather = this.props.weather.currentWeather;\n    return (\n      <div>\n        {\" \"}\n        <div className=\"city-name\">\n          {weatheres ? weatheres.city.name + \", \" + weatheres.city.country : \"\"}\n        </div>\n        <div className=\"weather-content\">\n          <div className=\"weather-icon\">\n            <img\n              src={\n                weatheres\n                  ? \"https://openweathermap.org/img/wn/\" +\n                    weatheres.list[currentWeather].weather[0].icon +\n                    \"@2x.png\"\n                  : \"\"\n              }\n            />\n          </div>\n          <div className=\"temp\">\n            {weatheres\n              ? new Date(weatheres.list[currentWeather].sunset * 1000) >\n                new Date()\n                ? Math.round(weatheres.list[currentWeather].temp.morn)\n                : Math.round(weatheres.list[currentWeather].temp.night)\n              : \"\"}\n            °\n          </div>\n          <div className=\"type-temp\">\n            <div className=\"active\">C</div>\n            <div className=\"in-active\">F</div>\n          </div>\n        </div>\n        <div className=\"weather-description\">\n          {weatheres\n            ? weatheres.list[currentWeather].weather[0].description\n            : \"\"}\n        </div>\n        <div className=\"time-updated\">\n          Updated as of\n          {\" \" +\n            new Date(Date.now()).toLocaleTimeString(\"vn-VN\", {\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            })}\n        </div>\n        <div className=\"weather-detail-1\">\n          <div className=\"content\">\n            <div className=\"content-title\">Feels Like</div>\n            <div className=\"content-value\">\n              {weatheres\n                ? Math.round(weatheres.list[currentWeather].feels_like.day)\n                : \"\"}\n              °\n            </div>\n          </div>\n          <div className=\"content\">\n            <div className=\"content-title\">Wind</div>\n            <div className=\"content-value\">\n              <FontAwesomeIcon\n                className={\n                  weatheres\n                    ? css`\n                        -webkit-transform: rotate(\n                          ${weatheres.list[currentWeather].deg}deg\n                        );\n                        -moz-transform: rotate(\n                          ${weatheres.list[currentWeather].deg}deg\n                        );\n                        -ms-transform: rotate(\n                          ${weatheres.list[currentWeather].deg}deg\n                        );\n                        -o-transform: rotate(\n                          ${weatheres.list[currentWeather].deg}deg\n                        );\n                        transform: rotate(\n                          ${weatheres.list[currentWeather].deg}deg\n                        );\n                      `\n                    : \"\"\n                }\n                icon={faLocationArrow}\n              />\n              {weatheres\n                ? \"   \" +\n                  Math.round(weatheres.list[currentWeather].speed * 3.6) +\n                  \"km/h\"\n                : \"\"}\n            </div>\n          </div>\n        </div>\n        <div className=\"weather-detail-1\">\n          <div className=\"content\">\n            <div className=\"content-title\">Barometer</div>\n            <div className=\"content-value\">\n              {weatheres\n                ? Math.round(weatheres.list[currentWeather].pressure)\n                : \"\"}\n              mb\n            </div>\n          </div>\n          <div className=\"content\">\n            <div className=\"content-title\">Humidity</div>\n            <div className=\"content-value\">\n              {weatheres\n                ? \"  \" + Math.round(weatheres.list[currentWeather].humidity)\n                : \"\"}\n              %\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default renderWeatherDetail;\n","/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable react/react-in-jsx-scope */\nimport React, { Component } from \"react\";\n\nclass renderForecastDaily extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: [true],\n    };\n    this.day = [\"Sun\", \"Mon\", \"Tue\", \"Web\", \"Thu\", \"Fri\", \"Sat\"];\n  }\n  handlerOnclickActiveDay(dt, index) {\n    var active = this.props.weatheres.list.map((daily) => {\n      if (dt === daily.dt) return true;\n      else return false;\n    });\n    this.setState({\n      active: active,\n    });\n    this.props.setStates({ currentWeather: index });\n  }\n\n  render() {\n    let weatheres = this.props.weatheres;\n    let active = this.state.active;\n    return (\n      <div className=\"forecast-daily\" id=\"forecast-daily-scroll\">\n        {weatheres\n          ? weatheres.list.map((daily, index) => (\n              <div\n                className={\n                  \"forecast-daily-day \" + (active[index] ? \"active-day\" : \"\")\n                }\n                key={index}\n                onClick={(e) => {\n                  this.handlerOnclickActiveDay(daily.dt, index);\n                }}\n              >\n                <div className=\"content-daily-day\">\n                  {this.day[new Date(daily.dt * 1000).getDay()] +\n                    \" \" +\n                    new Date(daily.dt * 1000).getDate()}\n                </div>\n                <img\n                  className={\n                    daily.weather[0].main !== \"Clouds\"\n                      ? \"content-daily-icon-1\"\n                      : \"content-daily-icon-2\"\n                  }\n                  src={\n                    \"https://openweathermap.org/img/wn/\" +\n                    daily.weather[0].icon +\n                    \".png\"\n                  }\n                />\n                <div className=\"content-daily-temp\">\n                  <div className=\"daily-temp-max\">\n                    {Math.round(daily.temp.max)}°\n                  </div>\n                  <div className=\"daily-temp-min\">\n                    {Math.round(daily.temp.min)}°\n                  </div>\n                </div>\n                <div className=\"daily-weather-des\">\n                  {daily.weather[0].description}\n                </div>\n              </div>\n            ))\n          : \"\"}\n      </div>\n    );\n  }\n}\n\nexport default renderForecastDaily;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { withRouter } from \"react-router-dom\";\nimport { css } from \"emotion\";\nimport OnSearchCity from \"./onSearchCity\";\nimport CurrentWeather from \"./renderWeatherDetail\";\nimport ForecastDaily from \"./renderForecastDaily\";\nimport BackgroundOnChange from \"./backgoundOnchange\";\nimport getDataWeather from \"./sevices/getDataWeather\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatheres: \"\",\n      currentWeather: 0,\n    };\n    this.setStates = this.setStates.bind(this);\n  }\n\n  async componentDidMount() {\n    let weatheres = await getDataWeather();\n    this.setState({ weatheres: weatheres });\n  }\n\n  setStates(obj) {\n    this.setState(obj);\n  }\n\n  render() {\n    const weatheres = this.state.weatheres;\n    const currentWeather = this.state.currentWeather;\n    let background = BackgroundOnChange(weatheres, currentWeather);\n    return (\n      <div\n        className={css`\n          text-align: center;\n          height: 100%;\n          background-image: url(\"${this.props.location.pathname}Image/${background}\");\n          background-position: left;\n          background-repeat: no-repeat;\n          background-size: cover;\n        `}\n      >\n        <div className=\"bg-sunny-background\">\n          <OnSearchCity setStates={this.setStates} />\n          <div className=\"main\">\n            <CurrentWeather\n              weather={{\n                weatheres: weatheres,\n                currentWeather: currentWeather,\n              }}\n            />\n            <div className=\"daily\">\n              <div className=\"title left\">Daily</div>\n              <div className=\"forecast\">\n                <div className=\"icon-scroll\">\n                  <FontAwesomeIcon\n                    className=\"icon-daily-left\"\n                    icon={faChevronLeft}\n                    id=\"scroll-daily-left\"\n                  />\n                </div>\n                <ForecastDaily\n                  weatheres={this.state.weatheres}\n                  setStates={this.setStates}\n                />\n                <div className=\"icon-scroll\">\n                  <FontAwesomeIcon\n                    className=\"icon-daily-right\"\n                    id=\"scroll-daily-right\"\n                    icon={faChevronRight}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","export default (weatheres, currentWeather) => {\n  let background = \"sunny.jpg\";\n  if (weatheres) {\n    switch (weatheres.list[currentWeather].weather[0].main) {\n      case \"Clouds\":\n        if (\n          weatheres.list[currentWeather].weather[0].description ===\n            \"few clouds\" ||\n          weatheres.list[currentWeather].weather[0].description ===\n            \"broken clouds\" ||\n          weatheres.list[currentWeather].weather[0].description ===\n            \"scattered clouds\"\n        ) {\n          background = \"fewClouds.jpeg\";\n        } else {\n          background = \"cloud.jpeg\";\n        }\n        break;\n      case \"Rain\":\n        if (\n          weatheres.list[currentWeather].weather[0].description === \"light rain\"\n        ) {\n          background = \"lightRain.jpg\";\n        } else {\n          background = \"ModerateRain.jpg\";\n        }\n        break;\n      case \"Clear\":\n        if (weatheres.list[currentWeather].sunset * 1000 > Date.now()) {\n          background = \"sunny.jpg\";\n        } else {\n          background = \"skynight.jpg\";\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  return background;\n};\n","/* eslint-disable no-restricted-globals */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nvar scrollDaily = document.getElementById(\"forecast-daily-scroll\");\nvar scrollDailyLeft = document.getElementById(\"scroll-daily-left\");\nvar scrollDailyRight = document.getElementById(\"scroll-daily-right\");\n\n// var limitScroll = (scrollDaily.scrollWidth / screen.width) * (2 / 3);\n// var countScrollLeft = 1;\nscrollDailyLeft.addEventListener(\"click\", function () {\n  scrollDaily.scrollLeft -= screen.width * (2 / 3);\n});\nscrollDailyRight.addEventListener(\"click\", function () {\n  scrollDaily.scrollLeft += screen.width * (2 / 3);\n});\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}